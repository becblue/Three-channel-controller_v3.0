<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [Three-channel controller_v3.0\Three-channel controller_v3.0]</title></head>
<body><HR>
<H1>Static Call Graph for image Three-channel controller_v3.0\Three-channel controller_v3.0</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Wed Jul 16 21:44:33 2025
<BR><P>
<H3>Maximum Stack Usage =        840 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; ResetAnalysis_HandleQueryRequest &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[39]">ADC3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39]">ADC3_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[db]">UART_EndRxTransfer</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[db]">UART_EndRxTransfer</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[11e]">OLED_AddDirtyRegion</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11e]">OLED_AddDirtyRegion</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from stm32f1xx_it.o(i.ADC1_2_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[49]">ADC_DMAConvCplt</a> from stm32f1xx_hal_adc.o(i.ADC_DMAConvCplt) referenced from stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[4b]">ADC_DMAError</a> from stm32f1xx_hal_adc.o(i.ADC_DMAError) referenced from stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[4a]">ADC_DMAHalfConvCplt</a> from stm32f1xx_hal_adc.o(i.ADC_DMAHalfConvCplt) referenced from stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f1xx_it.o(i.BusFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from stm32f1xx_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from stm32f1xx_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f1xx_it.o(i.HardFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f1xx_it.o(i.MemManage_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f1xx_it.o(i.NMI_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f1xx_it.o(i.PendSV_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f1xx_it.o(i.SVC_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f1xx_it.o(i.SysTick_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_stm32f1xx.o(i.SystemInit) referenced from startup_stm32f103xe.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4c]">UART_DMAAbortOnError</a> from stm32f1xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from stm32f1xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f103xe.o(.text)
 <LI><a href="#[4d]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[4e]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[4e]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[46]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(.text)
</UL>
<P><STRONG><a name="[1ab]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[4f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1ac]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1ad]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1ae]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1af]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[1b0]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1b1]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1b2]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_RefreshDirtyRegions
</UL>

<P><STRONG><a name="[f2]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_GetAlarmInfo
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_HandleQueryRequest
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowSelfTestBarWithStep
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_PrintResetReason
</UL>

<P><STRONG><a name="[1b3]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1b4]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_ExecuteSelfTest
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ResetDisplayCache
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ClearDirtyRegions
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>

<P><STRONG><a name="[ec]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Record
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_GetAlarmInfo
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_UpdateDisplay
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_Reset
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Reset
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_Init
</UL>

<P><STRONG><a name="[1b6]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[175]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_ExecuteSelfTest
</UL>

<P><STRONG><a name="[146]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_HandleQueryRequest
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_GetTotalResets
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_GetLastResetCause
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_GetAbnormalResets
</UL>

<P><STRONG><a name="[10c]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Record
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_SetAlarmFlag
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_UpdateDisplay
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_EnterErrorState
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_HandleQueryRequest
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Reset
</UL>

<P><STRONG><a name="[78]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_HandleSelfTestError
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_EnterErrorState
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowSelfTestBarWithStep
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowSelfTestBarWithCompanyLogo
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowMainScreenDirty
</UL>

<P><STRONG><a name="[1a9]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_GetTotalResets
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_GetAbnormalResets
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_ResToTemp
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_ResToTemp
</UL>

<P><STRONG><a name="[5c]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcNTCRes
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemperatureMonitor_UpdateAll
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_ResToTemp
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcNTCRes
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_PrintFlashStatus
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_MainLoopScheduler
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashQuickFillTest
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashFillTest
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemperatureMonitor_UpdateAll
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_ResToTemp
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcNTCRes
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_PrintFlashStatus
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_MainLoopScheduler
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashQuickFillTest
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashFillTest
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Init
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemperatureMonitor_UpdateAll
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_PrintFlashStatus
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_MainLoopScheduler
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashQuickFillTest
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashFillTest
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Init
</UL>

<P><STRONG><a name="[14d]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemperatureMonitor_UpdateAll
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckTemperatureAlarm
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_UpdateDisplay
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_SelfTest_Step4_TemperatureSafety
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_PrintFlashStatus
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_MainLoopScheduler
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashQuickFillTest
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashFillTest
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Init
</UL>

<P><STRONG><a name="[11d]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_ResToTemp
</UL>

<P><STRONG><a name="[1b7]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[1a7]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[56]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[57]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[1b8]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[59]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1a4]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[50]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1b9]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1ba]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1bb]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[66]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[65]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1bc]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.ADC1_2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC1_2_IRQHandler &rArr; HAL_ADC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>ADC_ConversionStop_Disable</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f1xx_hal_adc.o(i.ADC_ConversionStop_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_ConversionStop_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[49]"></a>ADC_DMAConvCplt</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f1xx_hal_adc.o(i.ADC_DMAConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[4b]"></a>ADC_DMAError</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f1xx_hal_adc.o(i.ADC_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[4a]"></a>ADC_DMAHalfConvCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f1xx_hal_adc.o(i.ADC_DMAHalfConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAHalfConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[73]"></a>ADC_Enable</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, stm32f1xx_hal_adc.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>DEBUG_Printf</STRONG> (Thumb, 42 bytes, Stack size 280 bytes, usart.o(i.DEBUG_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemperatureMonitor_UpdateAll
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemperatureMonitor_Init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemperatureMonitor_CheckAndHandleAlarm
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_StartOpenChannel
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_StartCloseChannel
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessPendingActions
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessAsyncOperations
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_OpenChannel
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_CloseChannel
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ProcessPolling
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PrintPollingStats
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPollingSystem
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DisableInterrupts
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_UpdateBeepState
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_UpdateAlarmOutput
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_ProcessDcCtrlInterrupt
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_ClearAlarmFlag
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckAlarmO_ClearCondition
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_SetAlarmFlag
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_OutputSingle
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_OutputHeader
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_OutputFooter
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_SafetyMonitorIntegration
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_UpdateSelfTestProgress
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_StartSelfTest
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_StartLogoDisplay
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_SelfTest_Step4_TemperatureSafety
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_SelfTest_Step3_ContactorCheck
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_SelfTest_Step2_RelayCorrection
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_SelfTest_Step1_ExpectedState
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_Reset
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_Process
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_PrintFlashStatus
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_MainLoopScheduler
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_Init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_HandleSelfTestError
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashReadTest
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashQuickFillTest
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashFillTest
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashCompleteErase
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_ExecuteSelfTest
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_ExecuteChannelShutdown
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_EnterNormalState
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_EnterErrorState
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_EnterAlarmState
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_Reset
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_HandleQueryRequest
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_TestConnection
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadInfo
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_CS_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_UpdateHealthPercentage
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Reset
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_FindLastWritePosition
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_WriteEntry
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_PrepareNewSector
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_HandleCircularOverwrite
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_SystemStartupCheck
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_Suspend
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_SetResetReason
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_SetResetCount
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_Resume
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_PrintResetReason
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_Feed
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[7b]"></a>GPIO_DisableInterrupts</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, gpio_control.o(i.GPIO_DisableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = GPIO_DisableInterrupts &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>GPIO_InitPollingSystem</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, gpio_control.o(i.GPIO_InitPollingSystem))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = GPIO_InitPollingSystem &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK3_EN
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK2_EN
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK1_EN
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadDC_CTRL
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>GPIO_PrintPollingStats</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, gpio_control.o(i.GPIO_PrintPollingStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = GPIO_PrintPollingStats &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>GPIO_ProcessPolling</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, gpio_control.o(i.GPIO_ProcessPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = GPIO_ProcessPolling &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_PowerFailureCallback
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_HandleEnableSignal
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK3_EN
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK2_EN
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK1_EN
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadDC_CTRL
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>GPIO_ReadDC_CTRL</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio_control.o(i.GPIO_ReadDC_CTRL))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ProcessPolling
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPollingSystem
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_ProcessDcCtrlInterrupt
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckPowerMonitor
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckAlarmO_ClearCondition
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_Init
</UL>

<P><STRONG><a name="[86]"></a>GPIO_ReadK1_1_STA</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio_control.o(i.GPIO_ReadK1_1_STA))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessPendingActions
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessAsyncOperations
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_CheckInterlock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckRelayStatus
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckAlarmBJN_ClearCondition
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_SelfTest_Step2_RelayCorrection
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_ExecuteChannelShutdown
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_Init
</UL>

<P><STRONG><a name="[87]"></a>GPIO_ReadK1_2_STA</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio_control.o(i.GPIO_ReadK1_2_STA))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessPendingActions
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessAsyncOperations
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_CheckInterlock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckRelayStatus
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckAlarmBJN_ClearCondition
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_SelfTest_Step2_RelayCorrection
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_ExecuteChannelShutdown
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_Init
</UL>

<P><STRONG><a name="[7d]"></a>GPIO_ReadK1_EN</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio_control.o(i.GPIO_ReadK1_EN))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessPendingActions
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_CheckInterlock
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ProcessPolling
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPollingSystem
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckEnableConflict
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckAlarmBJN_ClearCondition
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckAlarmA_ClearCondition
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_SelfTest_Step3_ContactorCheck
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_SelfTest_Step2_RelayCorrection
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_SelfTest_Step1_ExpectedState
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_Init
</UL>

<P><STRONG><a name="[88]"></a>GPIO_ReadK2_1_STA</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio_control.o(i.GPIO_ReadK2_1_STA))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessPendingActions
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessAsyncOperations
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_CheckInterlock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckRelayStatus
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckAlarmBJN_ClearCondition
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_SelfTest_Step2_RelayCorrection
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_ExecuteChannelShutdown
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_Init
</UL>

<P><STRONG><a name="[89]"></a>GPIO_ReadK2_2_STA</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio_control.o(i.GPIO_ReadK2_2_STA))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessPendingActions
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessAsyncOperations
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_CheckInterlock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckRelayStatus
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckAlarmBJN_ClearCondition
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_SelfTest_Step2_RelayCorrection
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_ExecuteChannelShutdown
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_Init
</UL>

<P><STRONG><a name="[7e]"></a>GPIO_ReadK2_EN</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio_control.o(i.GPIO_ReadK2_EN))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessPendingActions
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_CheckInterlock
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ProcessPolling
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPollingSystem
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckEnableConflict
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckAlarmBJN_ClearCondition
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckAlarmA_ClearCondition
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_SelfTest_Step3_ContactorCheck
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_SelfTest_Step2_RelayCorrection
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_SelfTest_Step1_ExpectedState
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_Init
</UL>

<P><STRONG><a name="[8a]"></a>GPIO_ReadK3_1_STA</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio_control.o(i.GPIO_ReadK3_1_STA))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessPendingActions
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessAsyncOperations
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_CheckInterlock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckRelayStatus
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckAlarmBJN_ClearCondition
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_SelfTest_Step2_RelayCorrection
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_ExecuteChannelShutdown
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_Init
</UL>

<P><STRONG><a name="[8b]"></a>GPIO_ReadK3_2_STA</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio_control.o(i.GPIO_ReadK3_2_STA))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessPendingActions
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessAsyncOperations
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_CheckInterlock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckRelayStatus
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckAlarmBJN_ClearCondition
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_SelfTest_Step2_RelayCorrection
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_ExecuteChannelShutdown
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_Init
</UL>

<P><STRONG><a name="[7f]"></a>GPIO_ReadK3_EN</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio_control.o(i.GPIO_ReadK3_EN))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessPendingActions
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_CheckInterlock
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ProcessPolling
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPollingSystem
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckEnableConflict
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckAlarmBJN_ClearCondition
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckAlarmA_ClearCondition
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_SelfTest_Step3_ContactorCheck
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_SelfTest_Step2_RelayCorrection
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_SelfTest_Step1_ExpectedState
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_Init
</UL>

<P><STRONG><a name="[8c]"></a>GPIO_ReadSW1_STA</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio_control.o(i.GPIO_ReadSW1_STA))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessPendingActions
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessAsyncOperations
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_CheckInterlock
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckContactorStatus
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckAlarmBJN_ClearCondition
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_SelfTest_Step3_ContactorCheck
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_ExecuteChannelShutdown
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_Init
</UL>

<P><STRONG><a name="[8d]"></a>GPIO_ReadSW2_STA</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio_control.o(i.GPIO_ReadSW2_STA))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessPendingActions
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessAsyncOperations
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_CheckInterlock
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckContactorStatus
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckAlarmBJN_ClearCondition
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_SelfTest_Step3_ContactorCheck
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_ExecuteChannelShutdown
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_Init
</UL>

<P><STRONG><a name="[8e]"></a>GPIO_ReadSW3_STA</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio_control.o(i.GPIO_ReadSW3_STA))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessPendingActions
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessAsyncOperations
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_CheckInterlock
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckContactorStatus
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckAlarmBJN_ClearCondition
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_SelfTest_Step3_ContactorCheck
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_ExecuteChannelShutdown
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_Init
</UL>

<P><STRONG><a name="[8f]"></a>GPIO_SetAlarmOutput</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio_control.o(i.GPIO_SetAlarmOutput))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_UpdateAlarmOutput
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_Init
</UL>

<P><STRONG><a name="[91]"></a>GPIO_SetBeepOutput</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio_control.o(i.GPIO_SetBeepOutput))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_UpdateBeepState
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_ProcessBeep
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_Init
</UL>

<P><STRONG><a name="[92]"></a>GPIO_SetK1_1_OFF</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio_control.o(i.GPIO_SetK1_1_OFF))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessAsyncOperations
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_Init
</UL>

<P><STRONG><a name="[93]"></a>GPIO_SetK1_1_ON</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio_control.o(i.GPIO_SetK1_1_ON))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessAsyncOperations
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_Init
</UL>

<P><STRONG><a name="[94]"></a>GPIO_SetK1_2_OFF</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio_control.o(i.GPIO_SetK1_2_OFF))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessAsyncOperations
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_Init
</UL>

<P><STRONG><a name="[95]"></a>GPIO_SetK1_2_ON</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio_control.o(i.GPIO_SetK1_2_ON))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessAsyncOperations
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_Init
</UL>

<P><STRONG><a name="[96]"></a>GPIO_SetK2_1_OFF</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio_control.o(i.GPIO_SetK2_1_OFF))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessAsyncOperations
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_Init
</UL>

<P><STRONG><a name="[97]"></a>GPIO_SetK2_1_ON</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio_control.o(i.GPIO_SetK2_1_ON))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessAsyncOperations
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_Init
</UL>

<P><STRONG><a name="[98]"></a>GPIO_SetK2_2_OFF</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio_control.o(i.GPIO_SetK2_2_OFF))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessAsyncOperations
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_Init
</UL>

<P><STRONG><a name="[99]"></a>GPIO_SetK2_2_ON</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio_control.o(i.GPIO_SetK2_2_ON))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessAsyncOperations
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_Init
</UL>

<P><STRONG><a name="[9a]"></a>GPIO_SetK3_1_OFF</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio_control.o(i.GPIO_SetK3_1_OFF))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessAsyncOperations
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_Init
</UL>

<P><STRONG><a name="[9b]"></a>GPIO_SetK3_1_ON</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio_control.o(i.GPIO_SetK3_1_ON))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessAsyncOperations
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_Init
</UL>

<P><STRONG><a name="[9c]"></a>GPIO_SetK3_2_OFF</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio_control.o(i.GPIO_SetK3_2_OFF))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessAsyncOperations
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_Init
</UL>

<P><STRONG><a name="[9d]"></a>GPIO_SetK3_2_ON</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio_control.o(i.GPIO_SetK3_2_ON))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessAsyncOperations
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_Init
</UL>

<P><STRONG><a name="[9e]"></a>HAL_ADCEx_InjectedConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_adc_ex.o(i.HAL_ADCEx_InjectedConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[113]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[70]"></a>HAL_ADC_ConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, temperature_monitor.o(i.HAL_ADC_ConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[72]"></a>HAL_ADC_ConvHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_ConvHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAHalfConvCplt
</UL>

<P><STRONG><a name="[71]"></a>HAL_ADC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAError
</UL>

<P><STRONG><a name="[6d]"></a>HAL_ADC_IRQHandler</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ADC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_LevelOutOfWindowCallback
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConvCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[a0]"></a>HAL_ADC_Init</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[9f]"></a>HAL_ADC_LevelOutOfWindowCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_LevelOutOfWindowCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[a1]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[a7]"></a>HAL_ADC_Start_DMA</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_ADC_Start_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemperatureMonitor_Init
</UL>

<P><STRONG><a name="[de]"></a>HAL_DMA_Abort</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[dc]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[a3]"></a>HAL_DMA_Init</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[a8]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>

<P><STRONG><a name="[aa]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_OpenChannel
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_CloseChannel
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartDelayWithForceFeed
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartDelayWithDebug
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartDelay
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_SelfTest_Step2_RelayCorrection
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_Feed
</UL>

<P><STRONG><a name="[ab]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, gpio.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[7a]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[a2]"></a>HAL_GPIO_Init</STRONG> (Thumb, 462 bytes, Stack size 40 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_CS_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[85]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSW3_STA
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSW2_STA
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSW1_STA
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK3_EN
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK3_2_STA
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK3_1_STA
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK2_EN
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK2_2_STA
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK2_1_STA
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK1_EN
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK1_2_STA
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK1_1_STA
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadDC_CTRL
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[90]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetK3_2_ON
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetK3_2_OFF
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetK3_1_ON
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetK3_1_OFF
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetK2_2_ON
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetK2_2_OFF
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetK2_1_ON
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetK2_1_OFF
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetK1_2_ON
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetK1_2_OFF
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetK1_1_ON
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetK1_1_OFF
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBeepOutput
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetAlarmOutput
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_WriteEnable
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadStatusRegister
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadInfo
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_PowerUp
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_CS_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_WriteData
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadData
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_EraseSector
</UL>

<P><STRONG><a name="[6f]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Record
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_StartOpenChannel
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_StartCloseChannel
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessPendingActions
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessAsyncOperations
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_OpenChannel
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_CloseChannel
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_PowerFailureCallback
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_HandleEnableSignal
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ProcessPolling
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPollingSystem
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_UpdateBeepState
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_ProcessDcCtrlInterrupt
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_ProcessBeep
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckPowerMonitor
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartDelayWithForceFeed
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_SetAlarmFlag
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_StartSelfTest
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_StartLogoDisplay
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_Reset
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_Process
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_MainLoopScheduler
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_Init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashQuickFillTest
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashFillTest
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_EnterNormalState
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_EnterErrorState
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_EnterAlarmState
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_UpdateRealTimeStatus
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_PredictResetRisk
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_WaitForReady
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Reset
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartDelay_FeedWatchdog
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_Suspend
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_Feed
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop_Disable
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[ac]"></a>HAL_I2C_Init</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[af]"></a>HAL_I2C_IsDeviceReady</STRONG> (Thumb, 354 bytes, Stack size 56 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_IsDeviceReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_TestConnection
</UL>

<P><STRONG><a name="[b1]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 294 bytes, Stack size 64 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCmd
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_TestConnection
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_RefreshDirtyRegions
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
</UL>

<P><STRONG><a name="[ad]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, i2c.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[b5]"></a>HAL_IWDG_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f1xx_hal_iwdg.o(i.HAL_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
</UL>

<P><STRONG><a name="[e8]"></a>HAL_IWDG_Refresh</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal_iwdg.o(i.HAL_IWDG_Refresh))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Format
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Refresh
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashReadTest
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashQuickFillTest
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashFillTest
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_FindLastWritePosition
</UL>

<P><STRONG><a name="[16c]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b6]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[b9]"></a>HAL_MspInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a6]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[a5]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[b7]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[bc]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[bd]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ae]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[193]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[be]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bf]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 778 bytes, Stack size 40 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[c0]"></a>HAL_SPI_Init</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
</UL>

<P><STRONG><a name="[c1]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[c2]"></a>HAL_SPI_Receive</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_SPI_Receive
</UL>

<P><STRONG><a name="[c5]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 358 bytes, Stack size 40 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_SPI_Transmit
</UL>

<P><STRONG><a name="[c3]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 496 bytes, Stack size 56 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadInfo
</UL>

<P><STRONG><a name="[ba]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[119]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[c7]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[c8]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[ca]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[cf]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, tim.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[d0]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC3_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[d5]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[d6]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[d7]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[dd]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[d9]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 616 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[e1]"></a>HAL_UART_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[e2]"></a>HAL_UART_MspInit</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[192]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[79]"></a>HAL_UART_Transmit</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
</UL>

<P><STRONG><a name="[e0]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[e7]"></a>IWDG_Refresh</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iwdg.o(i.IWDG_Refresh))
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartDelayWithForceFeed
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_EnterNormalState
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartDelay_FeedWatchdog
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_Feed
</UL>

<P><STRONG><a name="[e9]"></a>IwdgControl_Feed</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, iwdg_control.o(i.IwdgControl_Feed))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = IwdgControl_Feed &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Refresh
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_IsSystemSafeToFeed
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_Resume
</UL>

<P><STRONG><a name="[14b]"></a>IwdgControl_GetLastResetReason</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, iwdg_control.o(i.IwdgControl_GetLastResetReason))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_Init
</UL>

<P><STRONG><a name="[eb]"></a>IwdgControl_Init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, iwdg_control.o(i.IwdgControl_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = IwdgControl_Init &rArr; IwdgControl_SystemStartupCheck &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartDelayWithForceFeed
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_SystemStartupCheck
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ea]"></a>IwdgControl_IsSystemSafeToFeed</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, iwdg_control.o(i.IwdgControl_IsSystemSafeToFeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IwdgControl_IsSystemSafeToFeed
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_GetState
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_GetAlarmFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_Feed
</UL>

<P><STRONG><a name="[f1]"></a>IwdgControl_PrintResetReason</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, iwdg_control.o(i.IwdgControl_PrintResetReason))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = IwdgControl_PrintResetReason &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f3]"></a>IwdgControl_Resume</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, iwdg_control.o(i.IwdgControl_Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = IwdgControl_Resume &rArr; IwdgControl_Feed &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_Feed
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_SafetyMonitorIntegration
</UL>

<P><STRONG><a name="[f4]"></a>IwdgControl_SafetyMonitorIntegration</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, iwdg_control.o(i.IwdgControl_SafetyMonitorIntegration))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = IwdgControl_SafetyMonitorIntegration &rArr; IwdgControl_Suspend &rArr; LogSystem_Record &rArr; LogSystem_WriteEntry &rArr; LogSystem_PrepareNewSector &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_GetAlarmFlags
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_Suspend
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_MainLoopScheduler
</UL>

<P><STRONG><a name="[f6]"></a>IwdgControl_SetResetCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, iwdg_control.o(i.IwdgControl_SetResetCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = IwdgControl_SetResetCount &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f7]"></a>IwdgControl_SetResetReason</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, iwdg_control.o(i.IwdgControl_SetResetReason))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = IwdgControl_SetResetReason &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f5]"></a>IwdgControl_Suspend</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, iwdg_control.o(i.IwdgControl_Suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = IwdgControl_Suspend &rArr; LogSystem_Record &rArr; LogSystem_WriteEntry &rArr; LogSystem_PrepareNewSector &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Record
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_IsInitialized
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_SafetyMonitorIntegration
</UL>

<P><STRONG><a name="[ed]"></a>IwdgControl_SystemStartupCheck</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, iwdg_control.o(i.IwdgControl_SystemStartupCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = IwdgControl_SystemStartupCheck &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_Init
</UL>

<P><STRONG><a name="[10d]"></a>LogSystem_CalculateChecksum</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, log_system.o(i.LogSystem_CalculateChecksum))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Record
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_VerifyEntry
</UL>

<P><STRONG><a name="[fb]"></a>LogSystem_FindLastWritePosition</STRONG> (Thumb, 242 bytes, Stack size 168 bytes, log_system.o(i.LogSystem_FindLastWritePosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = LogSystem_FindLastWritePosition &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadData
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_VerifyEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Init
</UL>

<P><STRONG><a name="[fe]"></a>LogSystem_Format</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, log_system.o(i.LogSystem_Format))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = LogSystem_Format &rArr; LogSystem_Init &rArr; LogSystem_FindLastWritePosition &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_EraseSector
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashCompleteErase
</UL>

<P><STRONG><a name="[101]"></a>LogSystem_FormatTimestamp</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, log_system.o(i.LogSystem_FormatTimestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LogSystem_FormatTimestamp &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_OutputSingle
</UL>

<P><STRONG><a name="[145]"></a>LogSystem_GetEntryCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, log_system.o(i.LogSystem_GetEntryCount))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_PrintFlashStatus
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashReadTest
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashQuickFillTest
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashFillTest
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_HandleQueryRequest
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_GetTotalResets
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_GetLastResetCause
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_GetAbnormalResets
</UL>

<P><STRONG><a name="[111]"></a>LogSystem_GetEventCodeString</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, log_system.o(i.LogSystem_GetEventCodeString))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_WriteEntry
</UL>

<P><STRONG><a name="[12e]"></a>LogSystem_GetHealthPercentage</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, log_system.o(i.LogSystem_GetHealthPercentage))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_PrintFlashStatus
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowMainScreenDirty
</UL>

<P><STRONG><a name="[1aa]"></a>LogSystem_GetLogCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, log_system.o(i.LogSystem_GetLogCount))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17e]"></a>LogSystem_GetUsedSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, log_system.o(i.LogSystem_GetUsedSize))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_PrintFlashStatus
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashQuickFillTest
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashFillTest
</UL>

<P><STRONG><a name="[100]"></a>LogSystem_Init</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, log_system.o(i.LogSystem_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = LogSystem_Init &rArr; LogSystem_FindLastWritePosition &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Record
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_UpdateHealthPercentage
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_FindLastWritePosition
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Format
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17d]"></a>LogSystem_IsFull</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, log_system.o(i.LogSystem_IsFull))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_PrintFlashStatus
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashFillTest
</UL>

<P><STRONG><a name="[f8]"></a>LogSystem_IsInitialized</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, log_system.o(i.LogSystem_IsInitialized))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_PrintFlashStatus
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashReadTest
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashQuickFillTest
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashFillTest
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashCompleteErase
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_Reset
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_HandleQueryRequest
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_GetTotalResets
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_GetLastResetCause
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_GetAbnormalResets
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowMainScreenDirty
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_Suspend
</UL>

<P><STRONG><a name="[105]"></a>LogSystem_OutputFooter</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, log_system.o(i.LogSystem_OutputFooter))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = LogSystem_OutputFooter &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashReadTest
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[106]"></a>LogSystem_OutputHeader</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, log_system.o(i.LogSystem_OutputHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = LogSystem_OutputHeader &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashReadTest
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>LogSystem_OutputSingle</STRONG> (Thumb, 158 bytes, Stack size 120 bytes, log_system.o(i.LogSystem_OutputSingle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = LogSystem_OutputSingle &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadData
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_FormatTimestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashReadTest
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[109]"></a>LogSystem_ReadEntry</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, log_system.o(i.LogSystem_ReadEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LogSystem_ReadEntry &rArr; W25Q128_ReadData &rArr; W25Q128_WaitForReady &rArr; W25Q128_IsBusy &rArr; W25Q128_ReadStatusRegister &rArr; W25Q128_SPI_Receive &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadData
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_VerifyEntry
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_GetEntryAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_HandleQueryRequest
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_GetTotalResets
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_GetLastResetCause
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_GetAbnormalResets
</UL>

<P><STRONG><a name="[fa]"></a>LogSystem_Record</STRONG> (Thumb, 102 bytes, Stack size 88 bytes, log_system.o(i.LogSystem_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = LogSystem_Record &rArr; LogSystem_WriteEntry &rArr; LogSystem_PrepareNewSector &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_ValidateCategory
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_CalculateChecksum
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_WriteEntry
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_ClearAlarmFlag
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_SetAlarmFlag
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_MainLoopScheduler
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashQuickFillTest
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashFillTest
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_UpdateRealTimeStatus
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_Reset
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_PredictResetRisk
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_CheckAbnormalConditions
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_Suspend
</UL>

<P><STRONG><a name="[10f]"></a>LogSystem_Reset</STRONG> (Thumb, 214 bytes, Stack size 80 bytes, log_system.o(i.LogSystem_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = LogSystem_Reset &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_WriteData
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_EraseSector
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>LogSystem_UpdateHealthPercentage</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, log_system.o(i.LogSystem_UpdateHealthPercentage))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = LogSystem_UpdateHealthPercentage &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Init
</UL>

<P><STRONG><a name="[10b]"></a>LogSystem_ValidateCategory</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, log_system.o(i.LogSystem_ValidateCategory))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Record
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_VerifyEntry
</UL>

<P><STRONG><a name="[fd]"></a>LogSystem_VerifyEntry</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, log_system.o(i.LogSystem_VerifyEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LogSystem_VerifyEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_ValidateCategory
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_CalculateChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_ReadEntry
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_FindLastWritePosition
</UL>

<P><STRONG><a name="[112]"></a>MX_ADC1_Init</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, adc.o(i.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a8]"></a>MX_DMA_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MX_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[114]"></a>MX_GPIO_Init</STRONG> (Thumb, 420 bytes, Stack size 56 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[115]"></a>MX_I2C1_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, i2c.o(i.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[116]"></a>MX_IWDG_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, iwdg.o(i.MX_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = MX_IWDG_Init &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_EnterNormalState
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[117]"></a>MX_SPI2_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, spi.o(i.MX_SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[118]"></a>MX_TIM3_Init</STRONG> (Thumb, 146 bytes, Stack size 64 bytes, tim.o(i.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11a]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11b]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[11e]"></a>OLED_AddDirtyRegion</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, oled_display.o(i.OLED_AddDirtyRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = OLED_AddDirtyRegion &rArr;  OLED_AddDirtyRegion (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ClearDirtyRegions
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_AddDirtyRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowSelfTestBarWithCompanyLogo
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowMainScreenDirty
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawStringDirty
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_AddDirtyRegion
</UL>

<P><STRONG><a name="[120]"></a>OLED_Clear</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, oled_display.o(i.OLED_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = OLED_Clear &rArr; OLED_Refresh &rArr; OLED_WriteCmd &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_UpdateSelfTestProgress
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_StartSelfTest
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_HandleSelfTestError
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_EnterNormalState
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowSelfTestBarWithCompanyLogo
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowLogo
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[11f]"></a>OLED_ClearDirtyRegions</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, oled_display.o(i.OLED_ClearDirtyRegions))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OLED_ClearDirtyRegions
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_EnterNormalState
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_EnterErrorState
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_EnterAlarmState
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowMainScreenDirty
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_AddDirtyRegion
</UL>

<P><STRONG><a name="[122]"></a>OLED_DrawString</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, oled_display.o(i.OLED_DrawString))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = OLED_DrawString &rArr; OLED_Refresh &rArr; OLED_WriteCmd &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawString6x8
</UL>

<P><STRONG><a name="[123]"></a>OLED_DrawString6x8</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, oled_display.o(i.OLED_DrawString6x8))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = OLED_DrawString6x8 &rArr; OLED_DrawString &rArr; OLED_Refresh &rArr; OLED_WriteCmd &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawString
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_HandleSelfTestError
</UL>

<P><STRONG><a name="[124]"></a>OLED_DrawStringDirty</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, oled_display.o(i.OLED_DrawStringDirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OLED_DrawStringDirty &rArr; OLED_AddDirtyRegion &rArr;  OLED_AddDirtyRegion (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_AddDirtyRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowMainScreenDirty
</UL>

<P><STRONG><a name="[125]"></a>OLED_Init</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, oled_display.o(i.OLED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = OLED_Init &rArr; OLED_Clear &rArr; OLED_Refresh &rArr; OLED_WriteCmd &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCmd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[121]"></a>OLED_Refresh</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, oled_display.o(i.OLED_Refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = OLED_Refresh &rArr; OLED_WriteCmd &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCmd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_HandleSelfTestError
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowSelfTestBarWithStep
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowLogo
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawString
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>

<P><STRONG><a name="[127]"></a>OLED_RefreshDirtyRegions</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, oled_display.o(i.OLED_RefreshDirtyRegions))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = OLED_RefreshDirtyRegions &rArr; OLED_WriteCmd &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCmd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowSelfTestBarWithCompanyLogo
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowMainScreenDirty
</UL>

<P><STRONG><a name="[129]"></a>OLED_ResetDisplayCache</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, oled_display.o(i.OLED_ResetDisplayCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OLED_ResetDisplayCache
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_HandleSelfTestError
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_EnterNormalState
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_EnterErrorState
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_EnterAlarmState
</UL>

<P><STRONG><a name="[12a]"></a>OLED_ResetSelfTestBarState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, oled_display.o(i.OLED_ResetSelfTestBarState))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = OLED_ResetSelfTestBarState &rArr; OLED_ShowSelfTestBarWithCompanyLogo &rArr; OLED_RefreshDirtyRegions &rArr; OLED_WriteCmd &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowSelfTestBarWithCompanyLogo
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_UpdateSelfTestProgress
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_ResetSelfTestProgressState
</UL>

<P><STRONG><a name="[12f]"></a>OLED_ShowCompanyLogo</STRONG> (Thumb, 222 bytes, Stack size 52 bytes, oled_display.o(i.OLED_ShowCompanyLogo))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = OLED_ShowCompanyLogo
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowSelfTestBarWithCompanyLogo
</UL>

<P><STRONG><a name="[12c]"></a>OLED_ShowLogo</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, oled_display.o(i.OLED_ShowLogo))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = OLED_ShowLogo &rArr; OLED_Clear &rArr; OLED_Refresh &rArr; OLED_WriteCmd &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_StartLogoDisplay
</UL>

<P><STRONG><a name="[12d]"></a>OLED_ShowMainScreenDirty</STRONG> (Thumb, 352 bytes, Stack size 48 bytes, oled_display.o(i.OLED_ShowMainScreenDirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = OLED_ShowMainScreenDirty &rArr; OLED_RefreshDirtyRegions &rArr; OLED_WriteCmd &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_IsInitialized
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_GetHealthPercentage
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_RefreshDirtyRegions
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawStringDirty
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ClearDirtyRegions
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_AddDirtyRegion
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_UpdateDisplay
</UL>

<P><STRONG><a name="[12b]"></a>OLED_ShowSelfTestBarWithCompanyLogo</STRONG> (Thumb, 424 bytes, Stack size 48 bytes, oled_display.o(i.OLED_ShowSelfTestBarWithCompanyLogo))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = OLED_ShowSelfTestBarWithCompanyLogo &rArr; OLED_RefreshDirtyRegions &rArr; OLED_WriteCmd &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCompanyLogo
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_RefreshDirtyRegions
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_AddDirtyRegion
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_Process
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ResetSelfTestBarState
</UL>

<P><STRONG><a name="[131]"></a>OLED_ShowSelfTestBarWithStep</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, oled_display.o(i.OLED_ShowSelfTestBarWithStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = OLED_ShowSelfTestBarWithStep &rArr; OLED_Refresh &rArr; OLED_WriteCmd &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_UpdateSelfTestProgress
</UL>

<P><STRONG><a name="[132]"></a>OLED_TestConnection</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, oled_display.o(i.OLED_TestConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = OLED_TestConnection &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[133]"></a>RelayControl_CheckInterlock</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, relay_control.o(i.RelayControl_CheckInterlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RelayControl_CheckInterlock
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSW3_STA
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSW2_STA
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSW1_STA
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK3_EN
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK3_2_STA
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK3_1_STA
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK2_EN
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK2_2_STA
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK2_1_STA
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK1_EN
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK1_2_STA
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK1_1_STA
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_StartOpenChannel
</UL>

<P><STRONG><a name="[134]"></a>RelayControl_CloseChannel</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, relay_control.o(i.RelayControl_CloseChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = RelayControl_CloseChannel &rArr; RelayControl_ProcessAsyncOperations &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_StartCloseChannel
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessAsyncOperations
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_IsOperationInProgress
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_GetOperationResult
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_SelfTest_Step2_RelayCorrection
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_ExecuteChannelShutdown
</UL>

<P><STRONG><a name="[189]"></a>RelayControl_GetAsyncStatistics</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, relay_control.o(i.RelayControl_GetAsyncStatistics))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RelayControl_GetAsyncStatistics
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_MainLoopScheduler
</UL>

<P><STRONG><a name="[157]"></a>RelayControl_GetChannelState</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, relay_control.o(i.RelayControl_GetChannelState))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckRelayStatus
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckContactorStatus
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_UpdateDisplay
</UL>

<P><STRONG><a name="[140]"></a>RelayControl_GetHighestPriorityInterrupt</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, relay_control.o(i.RelayControl_GetHighestPriorityInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessPendingActions
</UL>

<P><STRONG><a name="[18a]"></a>RelayControl_GetInterferenceStatistics</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, relay_control.o(i.RelayControl_GetInterferenceStatistics))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_MainLoopScheduler
</UL>

<P><STRONG><a name="[138]"></a>RelayControl_GetOperationResult</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, relay_control.o(i.RelayControl_GetOperationResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RelayControl_GetOperationResult &rArr; FindAsyncOperationByChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindAsyncOperationByChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_OpenChannel
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_CloseChannel
</UL>

<P><STRONG><a name="[83]"></a>RelayControl_HandleEnableSignal</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, relay_control.o(i.RelayControl_HandleEnableSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RelayControl_HandleEnableSignal
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ProcessPolling
</UL>

<P><STRONG><a name="[13a]"></a>RelayControl_Init</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, relay_control.o(i.RelayControl_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = RelayControl_Init &rArr; LogSystem_Record &rArr; LogSystem_WriteEntry &rArr; LogSystem_PrepareNewSector &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Record
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetK3_2_ON
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetK3_2_OFF
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetK3_1_ON
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetK3_1_OFF
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetK2_2_ON
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetK2_2_OFF
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetK2_1_ON
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetK2_1_OFF
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetK1_2_ON
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetK1_2_OFF
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetK1_1_ON
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetK1_1_OFF
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[158]"></a>RelayControl_IsChannelBusy</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, relay_control.o(i.RelayControl_IsChannelBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RelayControl_IsChannelBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckRelayStatus
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckContactorStatus
</UL>

<P><STRONG><a name="[137]"></a>RelayControl_IsOperationInProgress</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, relay_control.o(i.RelayControl_IsOperationInProgress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RelayControl_IsOperationInProgress &rArr; FindAsyncOperationByChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindAsyncOperationByChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_OpenChannel
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_CloseChannel
</UL>

<P><STRONG><a name="[13b]"></a>RelayControl_OpenChannel</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, relay_control.o(i.RelayControl_OpenChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = RelayControl_OpenChannel &rArr; RelayControl_ProcessAsyncOperations &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_StartOpenChannel
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessAsyncOperations
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_IsOperationInProgress
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_GetOperationResult
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_SelfTest_Step2_RelayCorrection
</UL>

<P><STRONG><a name="[136]"></a>RelayControl_ProcessAsyncOperations</STRONG> (Thumb, 688 bytes, Stack size 40 bytes, relay_control.o(i.RelayControl_ProcessAsyncOperations))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = RelayControl_ProcessAsyncOperations &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetK3_2_ON
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetK3_2_OFF
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetK3_1_ON
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetK3_1_OFF
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetK2_2_ON
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetK2_2_OFF
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetK2_1_ON
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetK2_1_OFF
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetK1_2_ON
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetK1_2_OFF
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetK1_1_ON
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetK1_1_OFF
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSW3_STA
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSW2_STA
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSW1_STA
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK3_2_STA
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK3_1_STA
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK2_2_STA
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK2_1_STA
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK1_2_STA
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK1_1_STA
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_OpenChannel
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_CloseChannel
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_MainLoopScheduler
</UL>

<P><STRONG><a name="[13d]"></a>RelayControl_ProcessPendingActions</STRONG> (Thumb, 464 bytes, Stack size 48 bytes, relay_control.o(i.RelayControl_ProcessPendingActions))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = RelayControl_ProcessPendingActions &rArr; RelayControl_StartCloseChannel &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_GetState
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_IsAlarmActive
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ValidateStateChange
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_StartOpenChannel
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_StartCloseChannel
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_GetHighestPriorityInterrupt
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSW3_STA
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSW2_STA
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSW1_STA
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK3_EN
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK3_2_STA
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK3_1_STA
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK2_EN
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK2_2_STA
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK2_1_STA
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK1_EN
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK1_2_STA
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK1_1_STA
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_MainLoopScheduler
</UL>

<P><STRONG><a name="[135]"></a>RelayControl_StartCloseChannel</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, relay_control.o(i.RelayControl_StartCloseChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = RelayControl_StartCloseChannel &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFreeAsyncSlot
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindAsyncOperationByChannel
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessPendingActions
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_CloseChannel
</UL>

<P><STRONG><a name="[13c]"></a>RelayControl_StartOpenChannel</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, relay_control.o(i.RelayControl_StartOpenChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = RelayControl_StartOpenChannel &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_IsAlarmActive
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_CheckInterlock
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFreeAsyncSlot
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindAsyncOperationByChannel
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessPendingActions
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_OpenChannel
</UL>

<P><STRONG><a name="[13f]"></a>RelayControl_ValidateStateChange</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, relay_control.o(i.RelayControl_ValidateStateChange))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessPendingActions
</UL>

<P><STRONG><a name="[142]"></a>ResetAnalysis_CheckAbnormalConditions</STRONG> (Thumb, 56 bytes, Stack size 64 bytes, system_control.o(i.ResetAnalysis_CheckAbnormalConditions))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = ResetAnalysis_CheckAbnormalConditions &rArr; LogSystem_Record &rArr; LogSystem_WriteEntry &rArr; LogSystem_PrepareNewSector &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Record
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_GetAlarmFlags
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_pop
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_MainLoopScheduler
</UL>

<P><STRONG><a name="[144]"></a>ResetAnalysis_GetAbnormalResets</STRONG> (Thumb, 96 bytes, Stack size 88 bytes, system_control.o(i.ResetAnalysis_GetAbnormalResets))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ResetAnalysis_GetAbnormalResets &rArr; LogSystem_ReadEntry &rArr; W25Q128_ReadData &rArr; W25Q128_WaitForReady &rArr; W25Q128_IsBusy &rArr; W25Q128_ReadStatusRegister &rArr; W25Q128_SPI_Receive &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_ReadEntry
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_GetEntryCount
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_IsInitialized
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_PredictResetRisk
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_HandleQueryRequest
</UL>

<P><STRONG><a name="[147]"></a>ResetAnalysis_GetLastResetCause</STRONG> (Thumb, 96 bytes, Stack size 96 bytes, system_control.o(i.ResetAnalysis_GetLastResetCause))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ResetAnalysis_GetLastResetCause &rArr; LogSystem_ReadEntry &rArr; W25Q128_ReadData &rArr; W25Q128_WaitForReady &rArr; W25Q128_IsBusy &rArr; W25Q128_ReadStatusRegister &rArr; W25Q128_SPI_Receive &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_ReadEntry
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_GetEntryCount
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_IsInitialized
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_HandleQueryRequest
</UL>

<P><STRONG><a name="[148]"></a>ResetAnalysis_GetTotalResets</STRONG> (Thumb, 96 bytes, Stack size 88 bytes, system_control.o(i.ResetAnalysis_GetTotalResets))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ResetAnalysis_GetTotalResets &rArr; LogSystem_ReadEntry &rArr; W25Q128_ReadData &rArr; W25Q128_WaitForReady &rArr; W25Q128_IsBusy &rArr; W25Q128_ReadStatusRegister &rArr; W25Q128_SPI_Receive &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_ReadEntry
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_GetEntryCount
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_IsInitialized
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_HandleQueryRequest
</UL>

<P><STRONG><a name="[149]"></a>ResetAnalysis_HandleQueryRequest</STRONG> (Thumb, 544 bytes, Stack size 392 bytes, system_control.o(i.ResetAnalysis_HandleQueryRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = ResetAnalysis_HandleQueryRequest &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_ReadEntry
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_GetEntryCount
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_GetTotalResets
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_GetLastResetCause
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_GetAbnormalResets
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_IsInitialized
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14a]"></a>ResetAnalysis_Init</STRONG> (Thumb, 558 bytes, Stack size 240 bytes, system_control.o(i.ResetAnalysis_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = ResetAnalysis_Init &rArr; LogSystem_Record &rArr; LogSystem_WriteEntry &rArr; LogSystem_PrepareNewSector &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemperatureMonitor_GetInfo
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Record
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSW3_STA
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSW2_STA
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSW1_STA
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK3_EN
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK3_2_STA
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK3_1_STA
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK2_EN
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK2_2_STA
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK2_1_STA
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK1_EN
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK1_2_STA
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK1_1_STA
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadDC_CTRL
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_GetAlarmFlags
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_GetLastResetReason
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_GetTotalResets
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_GetAbnormalResets
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_IsInitialized
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14e]"></a>ResetAnalysis_PredictResetRisk</STRONG> (Thumb, 146 bytes, Stack size 80 bytes, system_control.o(i.ResetAnalysis_PredictResetRisk))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = ResetAnalysis_PredictResetRisk &rArr; LogSystem_Record &rArr; LogSystem_WriteEntry &rArr; LogSystem_PrepareNewSector &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Record
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_GetAlarmFlags
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_pop
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_GetAbnormalResets
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_MainLoopScheduler
</UL>

<P><STRONG><a name="[14f]"></a>ResetAnalysis_Reset</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, system_control.o(i.ResetAnalysis_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ResetAnalysis_Reset &rArr; LogSystem_Record &rArr; LogSystem_WriteEntry &rArr; LogSystem_PrepareNewSector &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Record
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_IsInitialized
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[150]"></a>ResetAnalysis_UpdateRealTimeStatus</STRONG> (Thumb, 156 bytes, Stack size 128 bytes, system_control.o(i.ResetAnalysis_UpdateRealTimeStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ResetAnalysis_UpdateRealTimeStatus &rArr; LogSystem_Record &rArr; LogSystem_WriteEntry &rArr; LogSystem_PrepareNewSector &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Record
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_GetAlarmFlags
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_pop
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_MainLoopScheduler
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[152]"></a>SafetyMonitor_CheckAlarmA_ClearCondition</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, safety_monitor.o(i.SafetyMonitor_CheckAlarmA_ClearCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SafetyMonitor_CheckAlarmA_ClearCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK3_EN
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK2_EN
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK1_EN
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_UpdateAllAlarmStatus
</UL>

<P><STRONG><a name="[153]"></a>SafetyMonitor_CheckAlarmBJN_ClearCondition</STRONG> (Thumb, 290 bytes, Stack size 48 bytes, safety_monitor.o(i.SafetyMonitor_CheckAlarmBJN_ClearCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SafetyMonitor_CheckAlarmBJN_ClearCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSW3_STA
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSW2_STA
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSW1_STA
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK3_EN
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK3_2_STA
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK3_1_STA
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK2_EN
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK2_2_STA
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK2_1_STA
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK1_EN
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK1_2_STA
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK1_1_STA
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_UpdateAllAlarmStatus
</UL>

<P><STRONG><a name="[154]"></a>SafetyMonitor_CheckAlarmKM_ClearCondition</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, safety_monitor.o(i.SafetyMonitor_CheckAlarmKM_ClearCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SafetyMonitor_CheckAlarmKM_ClearCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemperatureMonitor_GetInfo
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_IsAlarmActive
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_UpdateAllAlarmStatus
</UL>

<P><STRONG><a name="[155]"></a>SafetyMonitor_CheckAlarmO_ClearCondition</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, safety_monitor.o(i.SafetyMonitor_CheckAlarmO_ClearCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = SafetyMonitor_CheckAlarmO_ClearCondition &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadDC_CTRL
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_UpdateAllAlarmStatus
</UL>

<P><STRONG><a name="[156]"></a>SafetyMonitor_CheckContactorStatus</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, safety_monitor.o(i.SafetyMonitor_CheckContactorStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = SafetyMonitor_CheckContactorStatus &rArr; SafetyMonitor_SetAlarmFlag &rArr; LogSystem_Record &rArr; LogSystem_WriteEntry &rArr; LogSystem_PrepareNewSector &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_IsChannelBusy
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_GetChannelState
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSW3_STA
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSW2_STA
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSW1_STA
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_SetAlarmFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_UpdateAllAlarmStatus
</UL>

<P><STRONG><a name="[15a]"></a>SafetyMonitor_CheckEnableConflict</STRONG> (Thumb, 58 bytes, Stack size 80 bytes, safety_monitor.o(i.SafetyMonitor_CheckEnableConflict))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = SafetyMonitor_CheckEnableConflict &rArr; SafetyMonitor_SetAlarmFlag &rArr; LogSystem_Record &rArr; LogSystem_WriteEntry &rArr; LogSystem_PrepareNewSector &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK3_EN
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK2_EN
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK1_EN
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_SetAlarmFlag
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_UpdateAllAlarmStatus
</UL>

<P><STRONG><a name="[15b]"></a>SafetyMonitor_CheckPowerMonitor</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, safety_monitor.o(i.SafetyMonitor_CheckPowerMonitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = SafetyMonitor_CheckPowerMonitor &rArr; SafetyMonitor_SetAlarmFlag &rArr; LogSystem_Record &rArr; LogSystem_WriteEntry &rArr; LogSystem_PrepareNewSector &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_IsAlarmActive
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadDC_CTRL
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_UpdateBeepState
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_UpdateAlarmOutput
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_ProcessBeep
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_SetAlarmFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_UpdateAllAlarmStatus
</UL>

<P><STRONG><a name="[15f]"></a>SafetyMonitor_CheckRelayStatus</STRONG> (Thumb, 254 bytes, Stack size 56 bytes, safety_monitor.o(i.SafetyMonitor_CheckRelayStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = SafetyMonitor_CheckRelayStatus &rArr; SafetyMonitor_SetAlarmFlag &rArr; LogSystem_Record &rArr; LogSystem_WriteEntry &rArr; LogSystem_PrepareNewSector &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_IsChannelBusy
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_GetChannelState
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK3_2_STA
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK3_1_STA
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK2_2_STA
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK2_1_STA
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK1_2_STA
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK1_1_STA
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_SetAlarmFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_UpdateAllAlarmStatus
</UL>

<P><STRONG><a name="[160]"></a>SafetyMonitor_CheckTemperatureAlarm</STRONG> (Thumb, 124 bytes, Stack size 64 bytes, safety_monitor.o(i.SafetyMonitor_CheckTemperatureAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = SafetyMonitor_CheckTemperatureAlarm &rArr; SafetyMonitor_SetAlarmFlag &rArr; LogSystem_Record &rArr; LogSystem_WriteEntry &rArr; LogSystem_PrepareNewSector &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemperatureMonitor_GetInfo
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_SetAlarmFlag
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_UpdateAllAlarmStatus
</UL>

<P><STRONG><a name="[161]"></a>SafetyMonitor_ClearAlarmFlag</STRONG> (Thumb, 226 bytes, Stack size 64 bytes, safety_monitor.o(i.SafetyMonitor_ClearAlarmFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = SafetyMonitor_ClearAlarmFlag &rArr; LogSystem_Record &rArr; LogSystem_WriteEntry &rArr; LogSystem_PrepareNewSector &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_IsAlarmActive
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Record
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_UpdateAllAlarmStatus
</UL>

<P><STRONG><a name="[18e]"></a>SafetyMonitor_GetAlarmDescription</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, safety_monitor.o(i.SafetyMonitor_GetAlarmDescription))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_UpdateDisplay
</UL>

<P><STRONG><a name="[f0]"></a>SafetyMonitor_GetAlarmFlags</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, safety_monitor.o(i.SafetyMonitor_GetAlarmFlags))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_SafetyMonitorIntegration
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_UpdateDisplay
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_MainLoopScheduler
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_UpdateRealTimeStatus
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_PredictResetRisk
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_CheckAbnormalConditions
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_IsSystemSafeToFeed
</UL>

<P><STRONG><a name="[162]"></a>SafetyMonitor_GetAlarmInfo</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, safety_monitor.o(i.SafetyMonitor_GetAlarmInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SafetyMonitor_GetAlarmInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_UpdateDisplay
</UL>

<P><STRONG><a name="[167]"></a>SafetyMonitor_GetBeepStateDescription</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, safety_monitor.o(i.SafetyMonitor_GetBeepStateDescription))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_UpdateBeepState
</UL>

<P><STRONG><a name="[163]"></a>SafetyMonitor_Init</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, safety_monitor.o(i.SafetyMonitor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = SafetyMonitor_Init &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBeepOutput
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetAlarmOutput
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_Init
</UL>

<P><STRONG><a name="[13e]"></a>SafetyMonitor_IsAlarmActive</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, safety_monitor.o(i.SafetyMonitor_IsAlarmActive))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_StartOpenChannel
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessPendingActions
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_UpdateBeepState
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_UpdateAllAlarmStatus
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_ProcessDcCtrlInterrupt
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_ClearAlarmFlag
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckPowerMonitor
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckAlarmKM_ClearCondition
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_SetAlarmFlag
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_UpdateDisplay
</UL>

<P><STRONG><a name="[84]"></a>SafetyMonitor_PowerFailureCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, safety_monitor.o(i.SafetyMonitor_PowerFailureCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SafetyMonitor_PowerFailureCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ProcessPolling
</UL>

<P><STRONG><a name="[164]"></a>SafetyMonitor_Process</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, safety_monitor.o(i.SafetyMonitor_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = SafetyMonitor_Process &rArr; SafetyMonitor_UpdateAllAlarmStatus &rArr; SafetyMonitor_CheckEnableConflict &rArr; SafetyMonitor_SetAlarmFlag &rArr; LogSystem_Record &rArr; LogSystem_WriteEntry &rArr; LogSystem_PrepareNewSector &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_UpdateBeepState
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_UpdateAllAlarmStatus
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_UpdateAlarmOutput
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_ProcessBeep
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_MainLoopScheduler
</UL>

<P><STRONG><a name="[15e]"></a>SafetyMonitor_ProcessBeep</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, safety_monitor.o(i.SafetyMonitor_ProcessBeep))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SafetyMonitor_ProcessBeep
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBeepOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_ProcessDcCtrlInterrupt
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckPowerMonitor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_Process
</UL>

<P><STRONG><a name="[166]"></a>SafetyMonitor_ProcessDcCtrlInterrupt</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, safety_monitor.o(i.SafetyMonitor_ProcessDcCtrlInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = SafetyMonitor_ProcessDcCtrlInterrupt &rArr; SafetyMonitor_SetAlarmFlag &rArr; LogSystem_Record &rArr; LogSystem_WriteEntry &rArr; LogSystem_PrepareNewSector &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_IsAlarmActive
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadDC_CTRL
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_UpdateBeepState
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_UpdateAlarmOutput
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_ProcessBeep
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_SetAlarmFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[159]"></a>SafetyMonitor_SetAlarmFlag</STRONG> (Thumb, 254 bytes, Stack size 72 bytes, safety_monitor.o(i.SafetyMonitor_SetAlarmFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = SafetyMonitor_SetAlarmFlag &rArr; LogSystem_Record &rArr; LogSystem_WriteEntry &rArr; LogSystem_PrepareNewSector &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_IsAlarmActive
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Record
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_ProcessDcCtrlInterrupt
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckTemperatureAlarm
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckRelayStatus
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckPowerMonitor
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckEnableConflict
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckContactorStatus
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_SelfTest_Step1_ExpectedState
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_HandleSelfTestError
</UL>

<P><STRONG><a name="[15c]"></a>SafetyMonitor_UpdateAlarmOutput</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, safety_monitor.o(i.SafetyMonitor_UpdateAlarmOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = SafetyMonitor_UpdateAlarmOutput &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetAlarmOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_ProcessDcCtrlInterrupt
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckPowerMonitor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_Process
</UL>

<P><STRONG><a name="[165]"></a>SafetyMonitor_UpdateAllAlarmStatus</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, safety_monitor.o(i.SafetyMonitor_UpdateAllAlarmStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = SafetyMonitor_UpdateAllAlarmStatus &rArr; SafetyMonitor_CheckEnableConflict &rArr; SafetyMonitor_SetAlarmFlag &rArr; LogSystem_Record &rArr; LogSystem_WriteEntry &rArr; LogSystem_PrepareNewSector &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_IsAlarmActive
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_ClearAlarmFlag
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckTemperatureAlarm
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckRelayStatus
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckPowerMonitor
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckEnableConflict
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckContactorStatus
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckAlarmO_ClearCondition
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckAlarmKM_ClearCondition
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckAlarmBJN_ClearCondition
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckAlarmA_ClearCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_Process
</UL>

<P><STRONG><a name="[15d]"></a>SafetyMonitor_UpdateBeepState</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, safety_monitor.o(i.SafetyMonitor_UpdateBeepState))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = SafetyMonitor_UpdateBeepState &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_IsAlarmActive
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBeepOutput
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_GetBeepStateDescription
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_ProcessDcCtrlInterrupt
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckPowerMonitor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_Process
</UL>

<P><STRONG><a name="[168]"></a>SmartDelay</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, smart_delay.o(i.SmartDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SmartDelay &rArr; SmartDelay_FeedWatchdog &rArr; SmartDelay_ShouldFeedWatchdog
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartDelay_FeedWatchdog
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashReadTest
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashQuickFillTest
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashFillTest
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_WaitForReady
</UL>

<P><STRONG><a name="[16a]"></a>SmartDelayWithDebug</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, smart_delay.o(i.SmartDelayWithDebug))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SmartDelayWithDebug &rArr; SmartDelay_FeedWatchdog &rArr; SmartDelay_ShouldFeedWatchdog
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartDelay_FeedWatchdog
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_ExecuteSelfTest
</UL>

<P><STRONG><a name="[ee]"></a>SmartDelayWithForceFeed</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, smart_delay.o(i.SmartDelayWithForceFeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SmartDelayWithForceFeed &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_ExecuteChannelShutdown
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_PowerUp
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_Init
</UL>

<P><STRONG><a name="[169]"></a>SmartDelay_FeedWatchdog</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, smart_delay.o(i.SmartDelay_FeedWatchdog))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SmartDelay_FeedWatchdog &rArr; SmartDelay_ShouldFeedWatchdog
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Refresh
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartDelay_ShouldFeedWatchdog
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartDelayWithDebug
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartDelay
</UL>

<P><STRONG><a name="[16b]"></a>SmartDelay_ShouldFeedWatchdog</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, smart_delay.o(i.SmartDelay_ShouldFeedWatchdog))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SmartDelay_ShouldFeedWatchdog
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartDelay_FeedWatchdog
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[16d]"></a>SystemClock_Config</STRONG> (Thumb, 128 bytes, Stack size 96 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16e]"></a>SystemControl_EnterAlarmState</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, system_control.o(i.SystemControl_EnterAlarmState))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = SystemControl_EnterAlarmState &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ResetDisplayCache
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ClearDirtyRegions
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_MainLoopScheduler
</UL>

<P><STRONG><a name="[16f]"></a>SystemControl_EnterErrorState</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, system_control.o(i.SystemControl_EnterErrorState))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = SystemControl_EnterErrorState &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ResetDisplayCache
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ClearDirtyRegions
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_HandleSelfTestError
</UL>

<P><STRONG><a name="[170]"></a>SystemControl_EnterNormalState</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, system_control.o(i.SystemControl_EnterNormalState))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = SystemControl_EnterNormalState &rArr; MX_IWDG_Init &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Refresh
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ResetDisplayCache
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ClearDirtyRegions
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_MainLoopScheduler
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_ExecuteSelfTest
</UL>

<P><STRONG><a name="[171]"></a>SystemControl_ExecuteChannelShutdown</STRONG> (Thumb, 298 bytes, Stack size 16 bytes, system_control.o(i.SystemControl_ExecuteChannelShutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = SystemControl_ExecuteChannelShutdown &rArr; RelayControl_CloseChannel &rArr; RelayControl_ProcessAsyncOperations &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_CloseChannel
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSW3_STA
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSW2_STA
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSW1_STA
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK3_2_STA
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK3_1_STA
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK2_2_STA
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK2_1_STA
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK1_2_STA
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK1_1_STA
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartDelayWithForceFeed
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_StartSelfTest
</UL>

<P><STRONG><a name="[172]"></a>SystemControl_ExecuteSelfTest</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, system_control.o(i.SystemControl_ExecuteSelfTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = SystemControl_ExecuteSelfTest &rArr; SystemControl_HandleSelfTestError &rArr; SafetyMonitor_SetAlarmFlag &rArr; LogSystem_Record &rArr; LogSystem_WriteEntry &rArr; LogSystem_PrepareNewSector &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartDelayWithDebug
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_UpdateSelfTestProgress
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_SelfTest_Step4_TemperatureSafety
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_SelfTest_Step3_ContactorCheck
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_SelfTest_Step2_RelayCorrection
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_SelfTest_Step1_ExpectedState
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_HandleSelfTestError
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_EnterNormalState
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_Process
</UL>

<P><STRONG><a name="[17a]"></a>SystemControl_FlashCompleteErase</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, system_control.o(i.SystemControl_FlashCompleteErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = SystemControl_FlashCompleteErase &rArr; LogSystem_Format &rArr; LogSystem_Init &rArr; LogSystem_FindLastWritePosition &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Format
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_PrintFlashStatus
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_IsInitialized
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17c]"></a>SystemControl_FlashFillTest</STRONG> (Thumb, 538 bytes, Stack size 96 bytes, system_control.o(i.SystemControl_FlashFillTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = SystemControl_FlashFillTest &rArr; LogSystem_Record &rArr; LogSystem_WriteEntry &rArr; LogSystem_PrepareNewSector &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Record
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartDelay
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_IsFull
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_GetUsedSize
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_GetEntryCount
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_PrintFlashStatus
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_IsInitialized
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17f]"></a>SystemControl_FlashQuickFillTest</STRONG> (Thumb, 526 bytes, Stack size 88 bytes, system_control.o(i.SystemControl_FlashQuickFillTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = SystemControl_FlashQuickFillTest &rArr; LogSystem_Record &rArr; LogSystem_WriteEntry &rArr; LogSystem_PrepareNewSector &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Record
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartDelay
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_GetUsedSize
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_GetEntryCount
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_PrintFlashStatus
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_IsInitialized
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[180]"></a>SystemControl_FlashReadTest</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, system_control.o(i.SystemControl_FlashReadTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = SystemControl_FlashReadTest &rArr; LogSystem_OutputSingle &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartDelay
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_OutputSingle
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_OutputHeader
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_OutputFooter
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_GetEntryCount
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_IsInitialized
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ef]"></a>SystemControl_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_control.o(i.SystemControl_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessPendingActions
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartDelay_ShouldFeedWatchdog
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_IsSystemSafeToFeed
</UL>

<P><STRONG><a name="[179]"></a>SystemControl_HandleSelfTestError</STRONG> (Thumb, 106 bytes, Stack size 72 bytes, system_control.o(i.SystemControl_HandleSelfTestError))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = SystemControl_HandleSelfTestError &rArr; SafetyMonitor_SetAlarmFlag &rArr; LogSystem_Record &rArr; LogSystem_WriteEntry &rArr; LogSystem_PrepareNewSector &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_SetAlarmFlag
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_EnterErrorState
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ResetDisplayCache
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawString6x8
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_ExecuteSelfTest
</UL>

<P><STRONG><a name="[181]"></a>SystemControl_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, system_control.o(i.SystemControl_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = SystemControl_Init &rArr; SafetyMonitor_Init &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_Init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_StartLogoDisplay
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_ResetSelfTestProgressState
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[184]"></a>SystemControl_MainLoopScheduler</STRONG> (Thumb, 344 bytes, Stack size 88 bytes, system_control.o(i.SystemControl_MainLoopScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = SystemControl_MainLoopScheduler &rArr; SafetyMonitor_Process &rArr; SafetyMonitor_UpdateAllAlarmStatus &rArr; SafetyMonitor_CheckEnableConflict &rArr; SafetyMonitor_SetAlarmFlag &rArr; LogSystem_Record &rArr; LogSystem_WriteEntry &rArr; LogSystem_PrepareNewSector &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemperatureMonitor_UpdateAll
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemperatureMonitor_FanSpeed1sHandler
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemperatureMonitor_CheckAndHandleAlarm
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Record
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessPendingActions
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_ProcessAsyncOperations
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_GetInterferenceStatistics
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_GetAsyncStatistics
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_Process
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_GetAlarmFlags
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_SafetyMonitorIntegration
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_UpdateDisplay
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_EnterNormalState
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_EnterAlarmState
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_UpdateRealTimeStatus
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_PredictResetRisk
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_CheckAbnormalConditions
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_Process
</UL>

<P><STRONG><a name="[17b]"></a>SystemControl_PrintFlashStatus</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, system_control.o(i.SystemControl_PrintFlashStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = SystemControl_PrintFlashStatus &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_IsFull
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_GetUsedSize
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_GetEntryCount
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_IsInitialized
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_GetHealthPercentage
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashQuickFillTest
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashFillTest
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashCompleteErase
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18b]"></a>SystemControl_Process</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, system_control.o(i.SystemControl_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = SystemControl_Process &rArr; SystemControl_MainLoopScheduler &rArr; SafetyMonitor_Process &rArr; SafetyMonitor_UpdateAllAlarmStatus &rArr; SafetyMonitor_CheckEnableConflict &rArr; SafetyMonitor_SetAlarmFlag &rArr; LogSystem_Record &rArr; LogSystem_WriteEntry &rArr; LogSystem_PrepareNewSector &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_StartSelfTest
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_StartLogoDisplay
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_Reset
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_MainLoopScheduler
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_ExecuteSelfTest
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowSelfTestBarWithCompanyLogo
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18d]"></a>SystemControl_Reset</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, system_control.o(i.SystemControl_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = SystemControl_Reset &rArr; SystemControl_StartLogoDisplay &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_StartLogoDisplay
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_ResetSelfTestProgressState
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_Process
</UL>

<P><STRONG><a name="[182]"></a>SystemControl_ResetSelfTestProgressState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, system_control.o(i.SystemControl_ResetSelfTestProgressState))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SystemControl_ResetSelfTestProgressState &rArr; OLED_ResetSelfTestBarState &rArr; OLED_ShowSelfTestBarWithCompanyLogo &rArr; OLED_RefreshDirtyRegions &rArr; OLED_WriteCmd &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ResetSelfTestBarState
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_Reset
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_Init
</UL>

<P><STRONG><a name="[174]"></a>SystemControl_SelfTest_Step1_ExpectedState</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, system_control.o(i.SystemControl_SelfTest_Step1_ExpectedState))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = SystemControl_SelfTest_Step1_ExpectedState &rArr; SafetyMonitor_SetAlarmFlag &rArr; LogSystem_Record &rArr; LogSystem_WriteEntry &rArr; LogSystem_PrepareNewSector &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK3_EN
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK2_EN
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK1_EN
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_SetAlarmFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_ExecuteSelfTest
</UL>

<P><STRONG><a name="[176]"></a>SystemControl_SelfTest_Step2_RelayCorrection</STRONG> (Thumb, 534 bytes, Stack size 112 bytes, system_control.o(i.SystemControl_SelfTest_Step2_RelayCorrection))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = SystemControl_SelfTest_Step2_RelayCorrection &rArr; RelayControl_OpenChannel &rArr; RelayControl_ProcessAsyncOperations &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_OpenChannel
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_CloseChannel
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK3_EN
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK3_2_STA
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK3_1_STA
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK2_EN
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK2_2_STA
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK2_1_STA
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK1_EN
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK1_2_STA
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK1_1_STA
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_ExecuteSelfTest
</UL>

<P><STRONG><a name="[177]"></a>SystemControl_SelfTest_Step3_ContactorCheck</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, system_control.o(i.SystemControl_SelfTest_Step3_ContactorCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = SystemControl_SelfTest_Step3_ContactorCheck &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSW3_STA
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSW2_STA
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSW1_STA
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK3_EN
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK2_EN
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadK1_EN
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_ExecuteSelfTest
</UL>

<P><STRONG><a name="[178]"></a>SystemControl_SelfTest_Step4_TemperatureSafety</STRONG> (Thumb, 180 bytes, Stack size 64 bytes, system_control.o(i.SystemControl_SelfTest_Step4_TemperatureSafety))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = SystemControl_SelfTest_Step4_TemperatureSafety &rArr; TemperatureMonitor_UpdateAll &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemperatureMonitor_UpdateAll
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemperatureMonitor_GetInfo
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_ExecuteSelfTest
</UL>

<P><STRONG><a name="[183]"></a>SystemControl_StartLogoDisplay</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, system_control.o(i.SystemControl_StartLogoDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = SystemControl_StartLogoDisplay &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowLogo
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_Reset
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_Process
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_Init
</UL>

<P><STRONG><a name="[18c]"></a>SystemControl_StartSelfTest</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, system_control.o(i.SystemControl_StartSelfTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = SystemControl_StartSelfTest &rArr; SystemControl_ExecuteChannelShutdown &rArr; RelayControl_CloseChannel &rArr; RelayControl_ProcessAsyncOperations &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_ExecuteChannelShutdown
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_Process
</UL>

<P><STRONG><a name="[188]"></a>SystemControl_UpdateDisplay</STRONG> (Thumb, 376 bytes, Stack size 248 bytes, system_control.o(i.SystemControl_UpdateDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = SystemControl_UpdateDisplay &rArr; OLED_ShowMainScreenDirty &rArr; OLED_RefreshDirtyRegions &rArr; OLED_WriteCmd &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemperatureMonitor_GetInfo
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemperatureMonitor_GetFanSpeed
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemperatureMonitor_GetFanPWM
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_IsAlarmActive
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_GetChannelState
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_GetAlarmInfo
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_GetAlarmFlags
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_GetAlarmDescription
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowMainScreenDirty
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_MainLoopScheduler
</UL>

<P><STRONG><a name="[173]"></a>SystemControl_UpdateSelfTestProgress</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, system_control.o(i.SystemControl_UpdateSelfTestProgress))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = SystemControl_UpdateSelfTestProgress &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowSelfTestBarWithStep
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ResetSelfTestBarState
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_ExecuteSelfTest
</UL>

<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32f1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(.text)
</UL>
<P><STRONG><a name="[c9]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 134 bytes, Stack size 20 bytes, stm32f1xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[d8]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>

<P><STRONG><a name="[cb]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[d2]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, stm32f1xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[187]"></a>TemperatureMonitor_CheckAndHandleAlarm</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, temperature_monitor.o(i.TemperatureMonitor_CheckAndHandleAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = TemperatureMonitor_CheckAndHandleAlarm &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_MainLoopScheduler
</UL>

<P><STRONG><a name="[185]"></a>TemperatureMonitor_FanSpeed1sHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, temperature_monitor.o(i.TemperatureMonitor_FanSpeed1sHandler))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_MainLoopScheduler
</UL>

<P><STRONG><a name="[18f]"></a>TemperatureMonitor_GetFanPWM</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, temperature_monitor.o(i.TemperatureMonitor_GetFanPWM))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_UpdateDisplay
</UL>

<P><STRONG><a name="[190]"></a>TemperatureMonitor_GetFanSpeed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, temperature_monitor.o(i.TemperatureMonitor_GetFanSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_UpdateDisplay
</UL>

<P><STRONG><a name="[14c]"></a>TemperatureMonitor_GetInfo</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, temperature_monitor.o(i.TemperatureMonitor_GetInfo))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckTemperatureAlarm
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckAlarmKM_ClearCondition
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_UpdateDisplay
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_SelfTest_Step4_TemperatureSafety
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_Init
</UL>

<P><STRONG><a name="[191]"></a>TemperatureMonitor_Init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, temperature_monitor.o(i.TemperatureMonitor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = TemperatureMonitor_Init &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[186]"></a>TemperatureMonitor_UpdateAll</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, temperature_monitor.o(i.TemperatureMonitor_UpdateAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TemperatureMonitor_UpdateAll &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_ResToTemp
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcNTCRes
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_SelfTest_Step4_TemperatureSafety
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_MainLoopScheduler
</UL>

<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[ff]"></a>W25Q128_EraseSector</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, w25q128_driver.o(i.W25Q128_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = W25Q128_EraseSector &rArr; W25Q128_WriteEnable &rArr; W25Q128_ReadStatusRegister &rArr; W25Q128_SPI_Receive &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_WriteEnable
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_WaitForReady
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Format
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Reset
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_PrepareNewSector
</UL>

<P><STRONG><a name="[103]"></a>W25Q128_Init</STRONG> (Thumb, 1442 bytes, Stack size 16 bytes, w25q128_driver.o(i.W25Q128_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = W25Q128_Init &rArr; W25Q128_ReadInfo &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartDelayWithForceFeed
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_WaitForReady
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadInfo
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_PowerUp
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_SPI_Transmit
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_CS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Init
</UL>

<P><STRONG><a name="[19c]"></a>W25Q128_IsAddressValid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, w25q128_driver.o(i.W25Q128_IsAddressValid))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_WriteData
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadData
</UL>

<P><STRONG><a name="[19a]"></a>W25Q128_IsBusy</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, w25q128_driver.o(i.W25Q128_IsBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = W25Q128_IsBusy &rArr; W25Q128_ReadStatusRegister &rArr; W25Q128_SPI_Receive &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadStatusRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_WaitForReady
</UL>

<P><STRONG><a name="[198]"></a>W25Q128_PowerUp</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, w25q128_driver.o(i.W25Q128_PowerUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = W25Q128_PowerUp &rArr; W25Q128_SPI_Transmit &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartDelayWithForceFeed
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Init
</UL>

<P><STRONG><a name="[fc]"></a>W25Q128_ReadData</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, w25q128_driver.o(i.W25Q128_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = W25Q128_ReadData &rArr; W25Q128_WaitForReady &rArr; W25Q128_IsBusy &rArr; W25Q128_ReadStatusRegister &rArr; W25Q128_SPI_Receive &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_WaitForReady
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_IsAddressValid
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_SPI_Transmit
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_SPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_ReadEntry
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_OutputSingle
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_FindLastWritePosition
</UL>

<P><STRONG><a name="[199]"></a>W25Q128_ReadInfo</STRONG> (Thumb, 526 bytes, Stack size 64 bytes, w25q128_driver.o(i.W25Q128_ReadInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = W25Q128_ReadInfo &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_TestConnection
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Init
</UL>

<P><STRONG><a name="[19b]"></a>W25Q128_ReadStatusRegister</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, w25q128_driver.o(i.W25Q128_ReadStatusRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = W25Q128_ReadStatusRegister &rArr; W25Q128_SPI_Receive &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_SPI_Transmit
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_SPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_WriteEnable
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_IsBusy
</UL>

<P><STRONG><a name="[19e]"></a>W25Q128_TestConnection</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, w25q128_driver.o(i.W25Q128_TestConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = W25Q128_TestConnection &rArr; W25Q128_ReadInfo &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadInfo
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_CS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[195]"></a>W25Q128_WaitForReady</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, w25q128_driver.o(i.W25Q128_WaitForReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = W25Q128_WaitForReady &rArr; W25Q128_IsBusy &rArr; W25Q128_ReadStatusRegister &rArr; W25Q128_SPI_Receive &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartDelay
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_IsBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_WriteData
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadData
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_EraseSector
</UL>

<P><STRONG><a name="[110]"></a>W25Q128_WriteData</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, w25q128_driver.o(i.W25Q128_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = W25Q128_WriteData &rArr; W25Q128_WriteEnable &rArr; W25Q128_ReadStatusRegister &rArr; W25Q128_SPI_Receive &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_WriteEnable
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_WaitForReady
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_IsAddressValid
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Reset
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_WriteEntry
</UL>

<P><STRONG><a name="[196]"></a>W25Q128_WriteEnable</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, w25q128_driver.o(i.W25Q128_WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = W25Q128_WriteEnable &rArr; W25Q128_ReadStatusRegister &rArr; W25Q128_SPI_Receive &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadStatusRegister
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_WriteData
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_EraseSector
</UL>

<P><STRONG><a name="[19f]"></a>__0snprintf</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1be]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[f9]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_ClearAlarmFlag
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_SetAlarmFlag
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_UpdateDisplay
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_MainLoopScheduler
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashQuickFillTest
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashFillTest
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_UpdateRealTimeStatus
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_PredictResetRisk
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_CheckAbnormalConditions
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowMainScreenDirty
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_FormatTimestamp
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_Suspend
</UL>

<P><STRONG><a name="[1bf]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[1c0]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[1a1]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1c1]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[130]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckTemperatureAlarm
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_CheckEnableConflict
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_UpdateDisplay
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_HandleSelfTestError
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowSelfTestBarWithCompanyLogo
</UL>

<P><STRONG><a name="[1c2]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1c3]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1a2]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1c4]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[1c5]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[1c6]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[77]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
</UL>

<P><STRONG><a name="[143]"></a>__ARM_pop</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, system_control.o(i.__ARM_pop))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_UpdateRealTimeStatus
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_PredictResetRisk
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_CheckAbnormalConditions
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[1c7]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[1c8]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1c9]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1ca]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 4884 bytes, Stack size 104 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = main &rArr; ResetAnalysis_HandleQueryRequest &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemperatureMonitor_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_GetState
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Record
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ProcessPolling
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PrintPollingStats
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPollingSystem
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DisableInterrupts
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_ProcessDcCtrlInterrupt
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyMonitor_GetAlarmFlags
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_OutputSingle
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_OutputHeader
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_OutputFooter
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Refresh
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_Process
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_PrintFlashStatus
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_Init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashReadTest
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashQuickFillTest
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashFillTest
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemControl_FlashCompleteErase
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_Reset
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAnalysis_HandleQueryRequest
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_IsInitialized
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_TestConnection
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_TestConnection
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Reset
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_GetLogCount
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_SetResetReason
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_SetResetCount
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_PrintResetReason
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgControl_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[139]"></a>FindAsyncOperationByChannel</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, relay_control.o(i.FindAsyncOperationByChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FindAsyncOperationByChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_StartOpenChannel
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_StartCloseChannel
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_IsOperationInProgress
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_GetOperationResult
</UL>

<P><STRONG><a name="[141]"></a>FindFreeAsyncSlot</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, relay_control.o(i.FindFreeAsyncSlot))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_StartOpenChannel
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayControl_StartCloseChannel
</UL>

<P><STRONG><a name="[74]"></a>CalcNTCRes</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, temperature_monitor.o(i.CalcNTCRes))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CalcNTCRes &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemperatureMonitor_UpdateAll
</UL>

<P><STRONG><a name="[11c]"></a>NTC_ResToTemp</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, temperature_monitor.o(i.NTC_ResToTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = NTC_ResToTemp &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemperatureMonitor_UpdateAll
</UL>

<P><STRONG><a name="[126]"></a>OLED_WriteCmd</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, oled_display.o(i.OLED_WriteCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = OLED_WriteCmd &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_RefreshDirtyRegions
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[10a]"></a>LogSystem_GetEntryAddress</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, log_system.o(i.LogSystem_GetEntryAddress))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_ReadEntry
</UL>

<P><STRONG><a name="[102]"></a>LogSystem_HandleCircularOverwrite</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, log_system.o(i.LogSystem_HandleCircularOverwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = LogSystem_HandleCircularOverwrite &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_WriteEntry
</UL>

<P><STRONG><a name="[108]"></a>LogSystem_PrepareNewSector</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, log_system.o(i.LogSystem_PrepareNewSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = LogSystem_PrepareNewSector &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_EraseSector
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_WriteEntry
</UL>

<P><STRONG><a name="[10e]"></a>LogSystem_WriteEntry</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, log_system.o(i.LogSystem_WriteEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = LogSystem_WriteEntry &rArr; LogSystem_PrepareNewSector &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_WriteData
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_GetEventCodeString
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_PrepareNewSector
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_HandleCircularOverwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSystem_Record
</UL>

<P><STRONG><a name="[194]"></a>W25Q128_CS_Init</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, w25q128_driver.o(i.W25Q128_CS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = W25Q128_CS_Init &rArr; DEBUG_Printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_TestConnection
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Init
</UL>

<P><STRONG><a name="[19d]"></a>W25Q128_SPI_Receive</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, w25q128_driver.o(i.W25Q128_SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = W25Q128_SPI_Receive &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadStatusRegister
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadData
</UL>

<P><STRONG><a name="[197]"></a>W25Q128_SPI_Transmit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, w25q128_driver.o(i.W25Q128_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = W25Q128_SPI_Transmit &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_WriteEnable
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadStatusRegister
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_PowerUp
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_WriteData
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadData
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_EraseSector
</UL>

<P><STRONG><a name="[a9]"></a>DMA_SetConfig</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, stm32f1xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[bb]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[e6]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
</UL>

<P><STRONG><a name="[b2]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f1xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[b4]"></a>I2C_WaitOnBTFFlagUntilTimeout</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f1xx_hal_i2c.o(i.I2C_WaitOnBTFFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnBTFFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[b0]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, stm32f1xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>

<P><STRONG><a name="[e5]"></a>I2C_WaitOnMasterAddressFlagUntilTimeout</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, stm32f1xx_hal_i2c.o(i.I2C_WaitOnMasterAddressFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>

<P><STRONG><a name="[b3]"></a>I2C_WaitOnTXEFlagUntilTimeout</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f1xx_hal_i2c.o(i.I2C_WaitOnTXEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnTXEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>

<P><STRONG><a name="[c4]"></a>SPI_EndRxTransaction</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32f1xx_hal_spi.o(i.SPI_EndRxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_EndRxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>

<P><STRONG><a name="[c6]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, stm32f1xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[151]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, stm32f1xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>

<P><STRONG><a name="[ce]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[d1]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, stm32f1xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[d3]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, stm32f1xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[d4]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[cc]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[cd]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[4c]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[db]"></a>UART_EndRxTransfer</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>

<P><STRONG><a name="[da]"></a>UART_Receive_IT</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[e3]"></a>UART_SetConfig</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[e4]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, stm32f1xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[1a3]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1a0]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
</UL>

<P><STRONG><a name="[1a6]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1a5]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4d]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0snprintf)
</UL>
<P><STRONG><a name="[4e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0sprintf)
<LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
